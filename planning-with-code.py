# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TbQ5Xie9BFr0LHRMudl-eILVBoADvNO9
"""

pip install pandas

import pandas as pd
from collections import defaultdict

# The distribution
distribution = {
    'Feminine': {
        'total': 23,
        'categories': {
            'Tops (T-shirts & Blouses)': 3,
            'Shirts': 3,
            'Trousers': 2,
            'Skirts': 2,
            'Blazer': 1,
            'Tricot Tops': 5,
            'One-piece': 3,
            'Vest': 0,
            'Raincoat / Parka / Jacket': 2,
            'Wool Coat': 2
        }
    },
    'Masculine': {
        'total': 12,
        'categories': {
            'Tops': 2,
            'Shirts': 1,
            'Trousers': 2,
            'Skirts': 0,
            'Blazer': 1,
            'Tricot Tops': 2,
            'One-piece': 0,
            'Vest': 1,
            'Raincoat / Parka / Jacket': 2,
            'Wool Coat': 1
        }
    }
}

# Create the collection table
collection_data = []

for gender, gender_data in distribution.items():
    for category, count in gender_data['categories'].items():
        for i in range(count):
            collection_data.append({
                'category': category,
                'gender': gender,
                'colors': '',
                'silhouettes': '',
                'surface': '',
                'details': ''
            })

# Create DataFrame
df = pd.DataFrame(collection_data)

# Reorder columns
df = df[['category', 'gender', 'colors', 'silhouettes', 'surface', 'details']]

# Display the table
print("Collection Table Distribution:")
print("=" * 80)
print(f"Total products: {len(df)}")
print("=" * 80)
print(df.to_string(index=False))

import random
from collections import defaultdict

# Define the distribution
distribution = {
    'Feminine': {
        'total': 23,
        'categories': {
            'Tops (T-shirts & Blouses)': 3,
            'Shirts': 3,
            'Trousers': 2,
            'Skirts': 2,
            'Blazer': 1,
            'Tricot Tops': 5,
            'One-piece': 3,
            'Vest': 0,
            'Raincoat / Parka / Jacket': 2,
            'Wool Coat': 2
        }
    },
    'Masculine': {
        'total': 12,
        'categories': {
            'Tops': 2,
            'Shirts': 1,
            'Trousers': 2,
            'Skirts': 0,
            'Blazer': 1,
            'Tricot Tops': 2,
            'One-piece': 0,
            'Vest': 1,
            'Raincoat / Parka / Jacket': 2,
            'Wool Coat': 1
        }
    }
}


color_groups = {
    'group1': ['meteorite', 'cocoa'],
    'group2': ['white down', 'winter moss', 'spellbound'],
    'group3': ['autumn glaze', 'frosted mint', 'morning mist']
}

color_distribution = [('group1', 0.5), ('group2', 0.35), ('group3', 0.15)]

silhouette_groups = {
    'group1': ['tied up', 'drapes', 'basics'],
    'group2': ['poplin', 'shirt dress'],
    'group3': ['co-ords']
}

silhouette_distribution = [('group1', 0.5), ('group2', 0.3), ('group3', 0.2)]

surface_options = {
    'basics': 0.5,
    'sheer': 0.2,
    'stripes 1': 0.1,
    'stripes 2': 0.1,
    'braids': 0.1
}

detail_options = ['basics', 'utility', 'twists', 'sailor collar']


collection_data = []

for gender, gender_data in distribution.items():
    for category, count in gender_data['categories'].items():
        for i in range(count):
            collection_data.append({
                'category': category,
                'gender': gender,
                'colors': '',
                'silhouettes': '',
                'surface': '',
                'details': ''
            })

# Function to choose based on weighted distribution
def choose_weighted(weighted_options):
    total = sum(weight for _, weight in weighted_options)
    r = random.uniform(0, total)
    current = 0
    for option, weight in weighted_options:
        current += weight
        if r <= current:
            return option
    return weighted_options[-1][0]

# Function to check if all options are used for a gender
def check_all_options_used(data, column, options, gender):
    used_options = set(item[column] for item in data if item['gender'] == gender)
    return all(option in used_options for option in options)

# Fill colors column with rule for categories with fewer than 2 items
for item in collection_data:
    category_count = sum(1 for i in collection_data
                        if i['category'] == item['category'] and i['gender'] == item['gender'])

    if category_count < 2:
        limited_color_distribution = [('group1', 0.5), ('group2', 0.5)]
        color_group = choose_weighted(limited_color_distribution)
    else:
        color_group = choose_weighted(color_distribution)

    item['colors'] = random.choice(color_groups[color_group])

# Silhouettes column with special rules
# No shirt dress for men
shirt_dress_exists = False
for item in collection_data:
    if item['silhouettes'] == 'shirt dress':
        shirt_dress_exists = True
        break

if not shirt_dress_exists:
    # Find eligible items for shirt dress (only feminine)
    eligible_items = [item for item in collection_data
                     if item['silhouettes'] == '' and item['gender'] == 'Feminine']

    if eligible_items:
        random.choice(eligible_items)['silhouettes'] = 'shirt dress'

# Fill remaining silhouettes
for item in collection_data:
    if item['silhouettes'] == '':
        silhouette_group = choose_weighted(silhouette_distribution)

        # Special rule: co-ords only for Tops (T-shirts & Blouses)
        if silhouette_group == 'group3' and item['category'] != 'Tops (T-shirts & Blouses)':
            alternative_groups = [('group1', 0.5), ('group2', 0.5)]
            silhouette_group = choose_weighted(alternative_groups)

        # No shirt dress for men
        silhouette_options = silhouette_groups[silhouette_group].copy()
        if item['gender'] == 'Masculine' and 'shirt dress' in silhouette_options:
            silhouette_options.remove('shirt dress')
            # If no options left, choose from group1
            if not silhouette_options:
                silhouette_options = silhouette_groups['group1']

        item['silhouettes'] = random.choice(silhouette_options)

# Ensure all Surface options are used for both genders
surface_weighted = [(opt, weight) for opt, weight in surface_options.items()]
for item in collection_data:
    item['surface'] = choose_weighted(surface_weighted)

# Ensure all surface options are used for both genders
for gender in ['Feminine', 'Masculine']:
    if not check_all_options_used(collection_data, 'surface', surface_options.keys(), gender):
        # Find missing surface options for this gender
        used_surfaces = set(item['surface'] for item in collection_data if item['gender'] == gender)
        missing_surfaces = set(surface_options.keys()) - used_surfaces

        if missing_surfaces:
            # Find items of this gender that can be changed
            changeable_items = [item for item in collection_data
                               if item['gender'] == gender and item['surface'] not in missing_surfaces]

            if changeable_items:
                # Change one item to use a missing surface
                item_to_change = random.choice(changeable_items)
                item_to_change['surface'] = random.choice(list(missing_surfaces))

# Details: ensure all options are used for both genders
for item in collection_data:
    # Special rule: sailor collar only for specific categories
    eligible_details = detail_options.copy()
    if item['category'] not in ['Tops (T-shirts & Blouses)', 'Tricot Tops']:
        eligible_details = [d for d in detail_options if d != 'sailor collar']

    item['details'] = random.choice(eligible_details)

# Ensure all detail options are used for both genders
for gender in ['Feminine', 'Masculine']:
    eligible_details_for_gender = set()
    for item in collection_data:
        if item['gender'] == gender:
            # Replicate the eligibility logic
            details = detail_options.copy()
            if item['category'] not in ['Tops (T-shirts & Blouses)', 'Tricot Tops']:
                details = [d for d in detail_options if d != 'sailor collar']
            eligible_details_for_gender.update(details)

    if not check_all_options_used(collection_data, 'details', eligible_details_for_gender, gender):
        used_details = set(item['details'] for item in collection_data if item['gender'] == gender)
        missing_details = eligible_details_for_gender - used_details

        if missing_details:
            changeable_items = [item for item in collection_data
                               if item['gender'] == gender and item['details'] not in missing_details]

            if changeable_items:
                item_to_change = random.choice(changeable_items)

                eligible_for_item = detail_options.copy()
                if item_to_change['category'] not in ['Tops (T-shirts & Blouses)', 'Tricot Tops']:
                    eligible_for_item = [d for d in detail_options if d != 'sailor collar']

                # Choose only from missing details that are also eligible for this item
                available_choices = list(missing_details.intersection(eligible_for_item))
                if available_choices:
                    item_to_change['details'] = random.choice(available_choices)

# Function to display the table in a formatted way
def display_table(data):
    max_category = max(len(item['category']) for item in data)
    max_gender = max(len(item['gender']) for item in data)
    max_colors = max(len(item['colors']) for item in data)
    max_silhouettes = max(len(item['silhouettes']) for item in data)
    max_surface = max(len(item['surface']) for item in data)
    max_details = max(len(item['details']) for item in data)

    max_category = max(max_category, len('Category'))
    max_gender = max(max_gender, len('Gender'))
    max_colors = max(max_colors, len('Colors'))
    max_silhouettes = max(max_silhouettes, len('Silhouettes'))
    max_surface = max(max_surface, len('Surface'))
    max_details = max(max_details, len('Details'))

    # Header
    header = f"{'Category':<{max_category}} | {'Gender':<{max_gender}} | {'Colors':<{max_colors}} | {'Silhouettes':<{max_silhouettes}} | {'Surface':<{max_surface}} | {'Details':<{max_details}}"
    print(header)
    print('-' * len(header))

    # Rows
    for item in data:
        row = f"{item['category']:<{max_category}} | {item['gender']:<{max_gender}} | {item['colors']:<{max_colors}} | {item['silhouettes']:<{max_silhouettes}} | {item['surface']:<{max_surface}} | {item['details']:<{max_details}}"
        print(row)

# Display the table
print("COLLECTION TABLE WITH COMPLETED COLUMNS")
print("=" * 100)
print(f"Total products: {len(collection_data)}")
print("=" * 100)
display_table(collection_data)

# Display summary statistics
print("\n" + "=" * 100)
print("SUMMARY STATISTICS:")
print("=" * 100)

# Count distributions
def count_values(data, column):
    counts = defaultdict(int)
    for item in data:
        counts[item[column]] += 1
    return counts

print(f"\nColor Distribution:")
color_counts = count_values(collection_data, 'colors')
for color, count in sorted(color_counts.items()):
    percentage = (count / len(collection_data)) * 100
    print(f"  {color}: {count} pcs ({percentage:.1f}%)")

print(f"\nSilhouette Distribution:")
silhouette_counts = count_values(collection_data, 'silhouettes')
for silhouette, count in sorted(silhouette_counts.items()):
    percentage = (count / len(collection_data)) * 100
    print(f"  {silhouette}: {count} pcs ({percentage:.1f}%)")

print(f"\nSurface Distribution:")
surface_counts = count_values(collection_data, 'surface')
for surface, count in sorted(surface_counts.items()):
    percentage = (count / len(collection_data)) * 100
    print(f"  {surface}: {count} pcs ({percentage:.1f}%)")

print(f"\nDetails Distribution:")
details_counts = count_values(collection_data, 'details')
for detail, count in sorted(details_counts.items()):
    percentage = (count / len(collection_data)) * 100
    print(f"  {detail}: {count} pcs ({percentage:.1f}%)")

# Verify special rules
print(f"\n" + "=" * 100)
print("RULE VERIFICATION:")
print("=" * 100)

# Check shirt dress exists
shirt_dress_count = sum(1 for item in collection_data if item['silhouettes'] == 'shirt dress')
print(f"Shirt dress items: {shirt_dress_count} (should be at least 1)")

# Check no shirt dress for men
shirt_dress_men = sum(1 for item in collection_data if item['silhouettes'] == 'shirt dress' and item['gender'] == 'Masculine')
print(f"Shirt dress items for men: {shirt_dress_men} (should be 0)")

# Check co-ords only in Tops (T-shirts & Blouses)
co_ords_items = [item for item in collection_data if item['silhouettes'] == 'co-ords']
valid_co_ords = all(item['category'] == 'Tops (T-shirts & Blouses)' for item in co_ords_items)
print(f"Co-ords only in Tops category: {valid_co_ords} ({len(co_ords_items)} co-ords items)")

# Check sailor collar only in allowed categories
sailor_items = [item for item in collection_data if item['details'] == 'sailor collar']
valid_sailor = all(item['category'] in ['Tops (T-shirts & Blouses)', 'Tricot Tops'] for item in sailor_items)
print(f"Sailor collar only in allowed categories: {valid_sailor} ({len(sailor_items)} sailor collar items)")

# Check all surface options are used for both genders
print(f"\nSurface options coverage:")
for gender in ['Feminine', 'Masculine']:
    used_surfaces = set(item['surface'] for item in collection_data if item['gender'] == gender)
    all_surfaces = set(surface_options.keys())
    missing = all_surfaces - used_surfaces
    print(f"  {gender}: {len(used_surfaces)}/{len(all_surfaces)} surfaces used. Missing: {missing if missing else 'None'}")

# Check all detail options are used for both genders
print(f"\nDetail options coverage:")
for gender in ['Feminine', 'Masculine']:
    used_details = set(item['details'] for item in collection_data if item['gender'] == gender)
    # Get details that are actually eligible for this gender
    eligible_details = set()
    for item in collection_data:
        if item['gender'] == gender:
            details = detail_options.copy()
            if item['category'] not in ['Tops (T-shirts & Blouses)', 'Tricot Tops']:
                details = [d for d in detail_options if d != 'sailor collar']
            eligible_details.update(details)

    missing = eligible_details - used_details
    print(f"  {gender}: {len(used_details)}/{len(eligible_details)} details used. Missing: {missing if missing else 'None'}")

# Export to CSV
def export_to_csv(data, filename='fashion_collection.csv'):
    """Export the collection data to a CSV file"""
    import csv

    try:
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)

            writer.writerow(['Category', 'Gender', 'Colors', 'Silhouettes', 'Surface', 'Details'])

            for item in data:
                writer.writerow([
                    item['category'],
                    item['gender'],
                    item['colors'],
                    item['silhouettes'],
                    item['surface'],
                    item['details']
                ])

        print(f"\n✓ Collection successfully exported to {filename}")

    except Exception as e:
        print(f"\n✗ Error exporting to CSV: {e}")

export_to_csv(collection_data)